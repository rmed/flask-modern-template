# Development configuration
DEBUG_TB_INTERCEPT_REDIRECTS=False

# ----------------------------
# General settings
# ----------------------------

# Name to use for the site in email notifications
#SITENAME = "My App"

# Number of elements to include in paginated endpoints
ITEMS_PER_PAGE = 10


# ----------------------------
# Localization settings
# ----------------------------

# Default locale code to use in the application (e.g. when sending emails)
#
# This will usually be a two letter code
#BABEL_DEFAULT_LOCALE = "en"

# Default timezone for the application
#
# Available values are part of the `pytz` Python module. Check
# `pytz.all_timezones` for more information
#BABEL_DEFAULT_TIMEZONE = "UTC"


# ----------------------------
# Backend settings
# ----------------------------

# Environment settings
#
# NOTE: https://flask.palletsprojects.com/en/1.1.x/config/#environment-and-debug-features
# DEBUG = True
# TESTING = True
ENV = 'development'

# Database connection URI
#
# See <https://docs.sqlalchemy.org/en/13/core/engines.html> for more information
# regarding configuration of SQLAlchemy engines
SQLALCHEMY_DATABASE_URI = "sqlite:///../testdb.sqlite"

# Whether to track modifications in database operations
#
# By default this is set to the recommended value by SQLAlchemy (False), as
# this has a great impact on performance
#SQLALCHEMY_TRACK_MODIFICATIONS = False

# Secret key used for signatures and encryption
#
# In production this should be a random string with appropriate length
SECRET_KEY = "potato"

# Maximum accepted file size in uploads (in bytes).
#
# If using a reverse proxy, it should also be configured to have this limit.
#MAX_CONTENT_LENGTH = 4 * 1024 * 1024


# ----------------------------
# Encryption settings
# ----------------------------

# Schemes to support in the application through the `passlib` module
#
# This is used to generate passwords.
#PASSLIB_SCHEMES = ['bcrypt']

# List of `passlib` deprecated hashes
#
# Leaving the value in its default "auto" will deprecate all hashes except
# for the first hash type present in the `PASSLIB_SCHEMES` configuration
# variable
#PASSLIB_DEPRECATED = ["auto"]

# Set below algorithm-specific configuration values. For more information on
# such configuration values see:
#
# <https://passlib.readthedocs.io/en/stable/lib/passlib.context.html#algorithm-options>
#
# These values should be set following the convention
# `PASSLIB_ALG_<SCHEME>_<CONFIG>`. This will automatically be translated to the
# appropriate `<scheme>__<config>` configuration variable name internally and
# handed to passlib
#
# An example is given to set the number of rounds for bcrypt (14 by default):
#PASSLIB_ALG_BCRYPT_ROUNDS = 14


# ----------------------------
# Hash settings
# ----------------------------

# Minimum length the user hashes will have
#USER_HASHID_LENGTH = 10

# Salt to use for generating user Hashids
#
# Set this to a unique string to alter the way hashes are generated
#USER_HASHID_SALT = "salty"


# ----------------------------
# Mail settings
# ----------------------------

# Address of the mail server
MAIL_SERVER = "localhost"

# Port of the mail server
MAIL_PORT = 25

# Whether to use SSL when connecting to the server
#
# As SSL is deprecated in favor of TLS, the `MAIL_USE_TLS` option should be
# used instead
MAIL_USE_SSL = False

# Whether to use TLS when connecting to the server
#
# This is usually the preferred option for most SMTP servers and should be
# set to True in production
MAIL_USE_TLS = False

# Default sender for the mails
MAIL_DEFAULT_SENDER = "myapp"

# Account username
MAIL_USERNAME = ""

# Account password
MAIL_PASSWORD = ""


# ----------------------------
# Asynchronous task settings
# ----------------------------

# Use celery for asynchronous tasks
#
# This functionality requires installing the `celery` Python package. Once
# enabled, tasks such as generating downloads or sending emails will be
# delegated to a different process
USE_CELERY = False

# Broker and result backend URIs.
#
# Uncomment and set to appropriate values if `USE_CELERY` is set to True. An
# example is given using Redis as a backend for celery tasks. Note that celery
# backends may require additional Python packages, check
# <https://docs.celeryproject.org/en/stable/getting-started/first-steps-with-celery.html>
# for more information
#CELERY_BROKER = 'redis://localhost:6379'
#CELERY_RESULT_BACKEND = 'redis://localhost:6379'
